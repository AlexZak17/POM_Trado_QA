{"name": "test_add_payment_method", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_checkout_process.TestCheckout testMethod=test_add_payment_method>\n\n    def test_add_payment_method(self):\n        hp.HomePage.hello_guest_button_click(self)\n        lp.LoginPage.send_valid_phone_number(self)\n        lp.LoginPage.login_btn_click(self)\n        lp.LoginPage.input_valid_code(self)\n        lp.LoginPage.confirm_code_button_click(self)\n        td.sleep(2)\n        hp.HomePage.hello_guest_button_click(self)\n        cp.Checkout.add_card_click(self)\n        self.my_driver.switch_to.frame('yaadFrame')\n        cp.Checkout.write_valid_num_for_card(self)\n        cp.Checkout.write_valid_num_for_id(self)\n        cp.Checkout.write_valid_date(self)\n        cp.Checkout.write_valid_cvv(self)\n        cp.Checkout.submit_btn_click(self)\n        self.my_driver.switch_to.parent_frame()\n        td.sleep(5)\n>       assert td.WDW(self.my_driver, 5).until_not(td.EC.element_to_be_clickable((*hl.HeaderLocators.search_bar,)))\n\ntests\\test_checkout_process.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c812f7b8d33fe22a1295b2cf833770d8\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001E9C3D337E0>, message = ''\n\n    def until_not(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value evaluates to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`, or\n                  ``True`` if `method` has raised one of the ignored exceptions\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if not value:\n                    return value\n            except self._ignored_exceptions:\n                return True\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nven\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:118: TimeoutException"}, "start": 1680584922947, "stop": 1680584950469, "uuid": "b9de872b-db3d-4313-89ef-66b6f968a9c6", "historyId": "ebd6ce915acaef5c4c44e86aa13c2f86", "testCaseId": "0e4d084abc14045d68cc9c9461f78734", "fullName": "tests.test_checkout_process.TestCheckout#test_add_payment_method", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_checkout_process"}, {"name": "subSuite", "value": "TestCheckout"}, {"name": "host", "value": "AlexanderZak"}, {"name": "thread", "value": "4068-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_checkout_process"}]}